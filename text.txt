const { parallel } = require('gulp');

function javascript(cb) {
  // body omitted
  cb();
}

function css(cb) {
  // body omitted
  cb();
}

exports.build = parallel(javascript, css);


#########

const gulp = require('gulp');
const cssnano = require('gulp-cssnano');
//const sass = require('gulp-sass');
//const sass = require('gulp-sass')(require('sass'));
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');

function defaultTask(cb) {
    // place code for your default task here
    cb();
}

gulp.task('hello', function () {
    console.log('Hello world!');
});

// gulp.task('sass', function () {
//     return gulp.src('app/style.scss')
//         .pipe(sass())
//         .pipe(cssnano())
//         .pipe(gulp.dest('dist/css'));
// });

gulp.task('js', function () {
    return gulp.src(['app/js/plugins/*.js', 'app/js/*.js'])
        .pipe(concat('all.js'))
        .pipe(uglify())
        .pipe(gulp.dest('dist'));
});



exports.default = defaultTask












/* 
//const { series } = require('gulp');
//const fs = require('fs');

// The `clean` function is not exported so it can be considered a private task.
// It can still be used within the `series()` composition.
function clean(cb) {
  // body omitted
  cb();
}

// The `build` function is exported so it is public and can be run with the `gulp` command.
// It can also be used within the `series()` composition.
function build(cb) {
  // body omitted
  cb();
}

async function asyncAwaitTask() {
  const { version } = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  console.log(version);
  await Promise.resolve('some result');
}

exports.build = build;
exports.default = asyncAwaitTask;
exports.default = series(clean, build);

// function defaultTask(cb) {
//     // place code for your default task here
//     cb();
// }

// exports.default = defaultTask */